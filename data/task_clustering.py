import numpy as np, pandas as pd
from sklearn.cluster import AgglomerativeClustering

if __name__ == '__main__':

    # ------------------------------------------------------------------
    # 1)  Put the matrix in the exact row / column order of your table
    # ------------------------------------------------------------------
    tasks = [
        "CFA‑L1","CFA‑L2","CFA‑L3","CPA","FinanceBench","FiNER","FiQA","FNXL",
        "FinancialMath","FPB","Headline","NER","NWGI","TFNS",
        "XBRL‑Calc","XBRL‑Form","XBRL‑Tag","XBRL‑Val","XBRL‑Term"
    ]

    S = np.array([            # copy‑paste numbers row‑wise from your table
        [1,.749,.750,.767,.466,.265,.314,.262,.393,.341,.329,.448,.345,.288,.383,.357,.371,.365,.259],
        [.749,1,.951,.448,.464,.289,.229,.216,.220,.237,.261,.346,.263,.217,.330,.312,.315,.310,.290],
        [.750,.951,1,.422,.478,.300,.190,.239,.216,.209,.214,.369,.232,.183,.332,.318,.324,.315,.278],
        [.767,.448,.422,1,.579,.334,.322,.343,.548,.374,.344,.548,.337,.295,.445,.416,.422,.453,.343],
        [.466,.464,.478,.579,1,.449,.325,.434,.634,.386,.377,.379,.398,.292,.589,.568,.538,.592,.408],
        [.265,.289,.300,.334,.449,1,.062,.812,.281,.098,.111,.336,.112,.042,.533,.603,.590,.538,.475],
        [.314,.229,.190,.322,.325,.062,1,.138,.279,.937,.558,.207,.933,.974,.263,.258,.252,.261,.196],
        [.262,.216,.239,.343,.434,.812,.138,1,.333,.157,.167,.443,.180,.127,.613,.691,.697,.641,.526],
        [.393,.220,.216,.548,.634,.281,.279,.333,1,.314,.316,.297,.304,.245,.514,.495,.412,.483,.340],
        [.341,.237,.209,.374,.386,.098,.937,.157,.314,1,.534,.239,.948,.877,.305,.287,.282,.304,.222],
        [.329,.261,.214,.344,.377,.111,.558,.167,.316,.534,1,.213,.543,.509,.271,.281,.291,.294,.230],
        [.448,.346,.369,.548,.379,.336,.207,.443,.297,.239,.213,1,.211,.201,.432,.433,.468,.450,.428],
        [.345,.263,.232,.337,.398,.112,.933,.180,.304,.948,.543,.211,1,.875,.306,.299,.294,.308,.212],
        [.288,.217,.183,.295,.292,.042,.974,.127,.245,.877,.509,.201,.875,1,.235,.229,.227,.235,.175],
        [.383,.330,.332,.445,.589,.533,.263,.613,.514,.305,.271,.432,.306,.235,1,.968,.945,.961,.638],
        [.357,.312,.318,.416,.568,.603,.258,.691,.495,.287,.281,.433,.299,.229,.968,1,.963,.941,.625],
        [.371,.315,.324,.422,.538,.590,.252,.697,.412,.282,.291,.468,.294,.227,.945,.963,1,.958,.650],
        [.365,.310,.315,.453,.592,.538,.261,.641,.483,.304,.294,.450,.308,.235,.961,.941,.958,1,.640],
        [.259,.290,.278,.343,.408,.475,.196,.526,.340,.222,.230,.428,.212,.175,.638,.625,.650,.640,1]
    ])

    # ------------------------------------------------------------------
    # 2)  Agglomerative clustering on the distance matrix (1‑similarity)
    #     Here we ask for 3 clusters because we want 3‑5 groups.
    # ------------------------------------------------------------------
    D = 1 - S
    labels = AgglomerativeClustering(
        n_clusters=3, affinity="precomputed", linkage="average"
    ).fit_predict(D)

    # ------------------------------------------------------------------
    # 3)  Collect cluster members and check mean in‑cluster similarity
    # ------------------------------------------------------------------
    clusters = {}
    for t, lab in zip(tasks, labels):
        clusters.setdefault(lab, []).append(t)

    def mean_sim(members):
        idx = [tasks.index(x) for x in members]
        sims = [S[i,j] for i in idx for j in idx if i<j]
        return round(float(np.mean(sims)), 3)

    cluster_stats = {k: {"members": v, "mean_sim": mean_sim(v)}
                     for k,v in clusters.items()}

    print(cluster_stats)
